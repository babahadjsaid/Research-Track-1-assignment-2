// Generated by gencpp from file client_action/custommsg.msg
// DO NOT EDIT!


#ifndef CLIENT_ACTION_MESSAGE_CUSTOMMSG_H
#define CLIENT_ACTION_MESSAGE_CUSTOMMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace client_action
{
template <class ContainerAllocator>
struct custommsg_
{
  typedef custommsg_<ContainerAllocator> Type;

  custommsg_()
    : pose()
    , linear_vel()
    , angular_vel()  {
    }
  custommsg_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , linear_vel(_alloc)
    , angular_vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_vel_type;
  _linear_vel_type linear_vel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_vel_type;
  _angular_vel_type angular_vel;





  typedef boost::shared_ptr< ::client_action::custommsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::client_action::custommsg_<ContainerAllocator> const> ConstPtr;

}; // struct custommsg_

typedef ::client_action::custommsg_<std::allocator<void> > custommsg;

typedef boost::shared_ptr< ::client_action::custommsg > custommsgPtr;
typedef boost::shared_ptr< ::client_action::custommsg const> custommsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::client_action::custommsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::client_action::custommsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::client_action::custommsg_<ContainerAllocator1> & lhs, const ::client_action::custommsg_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.linear_vel == rhs.linear_vel &&
    lhs.angular_vel == rhs.angular_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::client_action::custommsg_<ContainerAllocator1> & lhs, const ::client_action::custommsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace client_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::client_action::custommsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client_action::custommsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_action::custommsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_action::custommsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_action::custommsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_action::custommsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::client_action::custommsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00736ead694a5e07bcff16ebadc9051b";
  }

  static const char* value(const ::client_action::custommsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00736ead694a5e07ULL;
  static const uint64_t static_value2 = 0xbcff16ebadc9051bULL;
};

template<class ContainerAllocator>
struct DataType< ::client_action::custommsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "client_action/custommsg";
  }

  static const char* value(const ::client_action::custommsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::client_action::custommsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point pose\n"
"geometry_msgs/Vector3 linear_vel\n"
"geometry_msgs/Vector3 angular_vel\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::client_action::custommsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::client_action::custommsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.linear_vel);
      stream.next(m.angular_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custommsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::client_action::custommsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::client_action::custommsg_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "linear_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_vel);
    s << indent << "angular_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLIENT_ACTION_MESSAGE_CUSTOMMSG_H
